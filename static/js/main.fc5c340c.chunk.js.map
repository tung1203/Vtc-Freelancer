{"version":3,"sources":["index.js"],"names":["a","canvas","document","getElementById","resizeCanvas","width","height","worldWidth","worldHeight","cam","createOrthoCamera","gl","getContext","whiteTex","createWhiteTex","world","b2World","b2Vec2","batch","createBatch","inputHandler","InputHandler","scale","loadTexture","bg","bottle","createPolygon","x","y","w","h","dynamic","density","bodyDef","b2BodyDef","type","b2BodyType","b2_dynamicBody","b2_staticBody","userData","img","position","body","CreateBody","shape","b2PolygonShape","shape0","shape1","SetAsBox","Set","CreateFixture","touched","screenCoords","Vector2","worldCoords","addEventListener","unprojectVector2","tmp","update","delta","GetBodyList","GetNext","pos","GetPosition","DestroyBody","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","fillRect","fixture","GetFixtureList","GetShape","GetType","b2ShapeType","e_polygonShape","vertices","m_vertices","length","vertice","push","drawPolygon","GetAngle","end","game","createGameLoop","setInterval","innerHTML","Math","round","getFps","init"],"mappings":"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","file":"static/js/main.fc5c340c.chunk.js","sourcesContent":["import \"./index.css\";\nimport {\n  b2World,\n  b2BodyDef,\n  b2BodyType,\n  b2Vec2,\n  b2ShapeType,\n  b2PolygonShape\n  // b2Vec2_zero,\n  // b2CircleShape,\n  // b2FixtureDef\n} from \"@flyover/box2d\";\n// import {} from \"./shapeUtil\";\nimport createWhiteTex from \"gl-white-texture\";\n// import { drawPolygon, fillRect } from \"./shapeUtil\";\nimport {\n  createGameLoop,\n  createOrthoCamera,\n  createBatch,\n  loadTexture,\n  InputHandler,\n  resizeCanvas,\n  drawPolygon,\n  fillRect,\n  Vector2\n} from \"gdxjs\";\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const [width, height] = resizeCanvas(canvas, 1);\n  const worldHeight = 3;\n  const worldWidth = (worldHeight * width) / height;\n  const cam = createOrthoCamera(worldWidth, worldHeight, width, height);\n  const gl = canvas.getContext(\"webgl\");\n  const whiteTex = createWhiteTex(gl);\n  const world = new b2World(new b2Vec2(0, 10));\n  const batch = createBatch(gl);\n  const inputHandler = new InputHandler(canvas);\n  const scale = 0.1;\n  const bg = await loadTexture(gl, \"./bg.jpg\");\n  const bottle = await loadTexture(gl, \"./bottle.png\");\n  // const createBox = (x, y, width, height, dynamic, density = 1) => {\n  //   const bodyDef = new b2BodyDef();\n  //   bodyDef.type = dynamic\n  //     ? b2BodyType.b2_dynamicBody\n  //     : b2BodyType.b2_staticBody;\n  //   bodyDef.position = new b2Vec2(x + width / 2, y + height / 2);\n  //   const body = world.CreateBody(bodyDef);\n  //   const shape = new b2PolygonShape();\n  //   shape.SetAsBox(width / 2, height / 2);\n  //   const fixtureDef = new b2FixtureDef();\n  //   fixtureDef.density = density;\n  //   fixtureDef.shape = shape;\n  //   fixtureDef.friction = 1;\n  //   body.CreateFixture(fixtureDef);\n  //   return body;\n  // };\n  const createPolygon = (x, y, w, h, dynamic = true, density = 1) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = dynamic\n      ? b2BodyType.b2_dynamicBody\n      : b2BodyType.b2_staticBody;\n    bodyDef.userData = {\n      width: w,\n      height: h,\n      img: bottle\n    };\n    bodyDef.position = new b2Vec2(x, y);\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    const shape0 = new b2PolygonShape();\n    const shape1 = new b2PolygonShape();\n    shape0.SetAsBox(0.25 * scale, 0.25 * scale, new b2Vec2(0, -1.25 * scale));\n    shape.Set([\n      new b2Vec2(-0.25 * scale, -1 * scale),\n      new b2Vec2(0.25 * scale, -1 * scale),\n      new b2Vec2(0.5 * scale, 0 * scale),\n      new b2Vec2(-0.5 * scale, 0 * scale)\n    ]);\n    shape1.SetAsBox(0.5 * scale, 1 * scale, new b2Vec2(0, 1 * scale));\n    body.CreateFixture(shape0, density);\n    body.CreateFixture(shape, density);\n    body.CreateFixture(shape1, density);\n    return body;\n  };\n\n  let touched = false;\n  const screenCoords = new Vector2(0, 0);\n  const worldCoords = new Vector2(0, 0);\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\n    touched = true;\n    screenCoords.x = x;\n    screenCoords.y = y;\n    cam.unprojectVector2(worldCoords, screenCoords);\n  });\n  inputHandler.addEventListener(\"touchEnd\", (x, y) => {\n    touched = false;\n  });\n  const tmp = [];\n  // const ground = createBox(0.1, 2.5, worldWidth - 0.2, 0.2, false);\n  // const box = createBox(width / 2 - 0.1, height / 2 - 0.1, 0.2, 0.2);\n\n  const update = delta => {\n    if (touched) {\n      // createBox(worldCoords.x, worldCoords.y, 0.1, 0.1, true);\n      createPolygon(worldCoords.x, worldCoords.y, 1, 2, true);\n    }\n    for (let body = world.GetBodyList(); body; body = body.GetNext()) {\n      const pos = body.GetPosition();\n      if (pos.x < 0 || pos.x > width || pos.y < 0 || pos.y > height) {\n        world.DestroyBody(body);\n      }\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(cam.combined);\n    batch.begin();\n    fillRect(batch, bg, 0, 0, worldWidth, worldHeight);\n    for (let body = world.GetBodyList(); body; body = body.GetNext()) {\n      const pos = body.GetPosition();\n      for (\n        let fixture = body.GetFixtureList();\n        fixture;\n        fixture = fixture.GetNext()\n      ) {\n        const shape = fixture.GetShape();\n        if (shape.GetType() === b2ShapeType.e_polygonShape) {\n          const vertices = shape.m_vertices;\n          // console.log(tmp.length);\n          tmp.length = 0;\n          for (let vertice of vertices) {\n            tmp.push(vertice.x + pos.x, vertice.y + pos.y);\n          }\n          drawPolygon(batch, whiteTex, tmp, 0.01);\n          fillRect(\n            batch,\n            bottle,\n            body.GetPosition().x - (1 * scale) / 2,\n            body.GetPosition().y - (2.25 * scale) / 2,\n            1 * scale,\n            2.25 * 1.35 * scale,\n            body.GetAngle()\n          );\n          // fillRect(batc)\n        }\n      }\n    }\n    batch.end();\n  };\n  const game = createGameLoop(update);\n  setInterval(() => {\n    document.getElementById(\"infor\").innerHTML = `fps: ${Math.round(\n      game.getFps()\n    )}`;\n  }, 1000);\n};\ninit();\n"],"sourceRoot":""}